// generated by jsonenums -type=ClientState; DO NOT EDIT

package tunnel

import (
	"encoding/json"
	"fmt"
)

var (
	_ClientStateNameToValue = map[string]ClientState{
		"ClientUnknown":      ClientUnknown,
		"ClientStarted":      ClientStarted,
		"ClientConnecting":   ClientConnecting,
		"ClientConnected":    ClientConnected,
		"ClientDisconnected": ClientDisconnected,
		"ClientClosed":       ClientClosed,
	}

	_ClientStateValueToName = map[ClientState]string{
		ClientUnknown:      "ClientUnknown",
		ClientStarted:      "ClientStarted",
		ClientConnecting:   "ClientConnecting",
		ClientConnected:    "ClientConnected",
		ClientDisconnected: "ClientDisconnected",
		ClientClosed:       "ClientClosed",
	}
)

func init() {
	var v ClientState
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ClientStateNameToValue = map[string]ClientState{
			interface{}(ClientUnknown).(fmt.Stringer).String():      ClientUnknown,
			interface{}(ClientStarted).(fmt.Stringer).String():      ClientStarted,
			interface{}(ClientConnecting).(fmt.Stringer).String():   ClientConnecting,
			interface{}(ClientConnected).(fmt.Stringer).String():    ClientConnected,
			interface{}(ClientDisconnected).(fmt.Stringer).String(): ClientDisconnected,
			interface{}(ClientClosed).(fmt.Stringer).String():       ClientClosed,
		}
	}
}

// MarshalJSON is generated so ClientState satisfies json.Marshaler.
func (r ClientState) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ClientStateValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ClientState: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ClientState satisfies json.Unmarshaler.
func (r *ClientState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ClientState should be a string, got %s", data)
	}
	v, ok := _ClientStateNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ClientState %q", s)
	}
	*r = v
	return nil
}
